/*
 * Created by Stanislav Merzlyakov
 * st.merzlyakov@yandex.ru
 *  in May-2022.
 */

package su.ztech.crypto.gost34112012

import kotlin.test.Test
import kotlin.test.assertContentEquals

class StribogTest {

    @Test
    fun testFn() {
        val inputMessage = ubyteArrayOf(
            0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
            0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
            0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
            0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u
        )

        val m = padding(inputMessage, blockSize = BLOCK_SIZE)

        assertContentEquals(
            ubyteArrayOf(
                0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
                0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
                0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
                0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x01u
            ),
            m
        )

        val n = UByteArray(BLOCK_SIZE)
        val h = UByteArray(BLOCK_SIZE)

        var s = funS(funX(n, h))

        assertContentEquals(
            ubyteArrayOf(
                0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu,
                0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu,
                0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu,
                0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu
            ),
            s
        )

        var p = funP(s)

        assertContentEquals(
            ubyteArrayOf(
                0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu,
                0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu,
                0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu,
                0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu, 0xfcu
            ),
            p
        )

        var l = funL(p)

        assertContentEquals(
            ubyteArrayOf(
                0x74u, 0xa5u, 0xd4u, 0xceu, 0x2eu, 0xfcu, 0x83u, 0xb3u, 0x74u, 0xa5u, 0xd4u, 0xceu, 0x2eu, 0xfcu, 0x83u, 0xb3u,
                0x74u, 0xa5u, 0xd4u, 0xceu, 0x2eu, 0xfcu, 0x83u, 0xb3u, 0x74u, 0xa5u, 0xd4u, 0xceu, 0x2eu, 0xfcu, 0x83u, 0xb3u,
                0x74u, 0xa5u, 0xd4u, 0xceu, 0x2eu, 0xfcu, 0x83u, 0xb3u, 0x74u, 0xa5u, 0xd4u, 0xceu, 0x2eu, 0xfcu, 0x83u, 0xb3u,
                0x74u, 0xa5u, 0xd4u, 0xceu, 0x2eu, 0xfcu, 0x83u, 0xb3u, 0x74u, 0xa5u, 0xd4u, 0xceu, 0x2eu, 0xfcu, 0x83u, 0xb3u,
            ),
            l
        )

        val key = l

        var x = funX(key, m)

        assertContentEquals(
            ubyteArrayOf(
                0x44u, 0x94u, 0xe6u, 0xfdu, 0x1au, 0xc9u, 0xb5u, 0x84u, 0x4cu, 0x9cu, 0xe4u, 0xffu, 0x1cu, 0xcfu, 0xb7u, 0x86u,
                0x42u, 0x92u, 0xecu, 0xf7u, 0x1eu, 0xcdu, 0xb1u, 0x80u, 0x40u, 0x90u, 0xe2u, 0xf9u, 0x16u, 0xc5u, 0xb3u, 0x82u,
                0x46u, 0x96u, 0xe0u, 0xfbu, 0x18u, 0xcbu, 0xbbu, 0x8au, 0x44u, 0x94u, 0xe6u, 0xfdu, 0x1au, 0xc9u, 0xb5u, 0x84u,
                0x4cu, 0x9cu, 0xe4u, 0xffu, 0x1cu, 0xcfu, 0xb7u, 0x86u, 0x42u, 0x92u, 0xecu, 0xf7u, 0x1eu, 0xcdu, 0xb1u, 0xb2u,
            ),
            x
        )

        s = funS(x)

        assertContentEquals(
            ubyteArrayOf(
                0xeau, 0x7au, 0x09u, 0x4bu, 0xf1u, 0x37u, 0x5eu, 0x3eu, 0xfdu, 0x4eu, 0x2du, 0xb6u, 0x14u, 0x89u, 0x2fu, 0x43u,
                0x2cu, 0xecu, 0xbeu, 0xc0u, 0x5fu, 0xd9u, 0x45u, 0xdfu, 0xebu, 0xe0u, 0x67u, 0x66u, 0x99u, 0xacu, 0x92u, 0x24u,
                0x48u, 0xb0u, 0x20u, 0xc2u, 0x17u, 0xe4u, 0x7du, 0xd6u, 0xeau, 0x7au, 0x09u, 0x4bu, 0xf1u, 0x37u, 0x5eu, 0x3eu,
                0xfdu, 0x4eu, 0x2du, 0xb6u, 0x14u, 0x89u, 0x2fu, 0x43u, 0x2cu, 0xecu, 0xbeu, 0xc0u, 0x5fu, 0xd9u, 0x45u, 0x46u,
            ),
            s
        )

        p = funP(s)

        assertContentEquals(
            ubyteArrayOf(
                0xeau, 0xfdu, 0x2cu, 0xebu, 0x48u, 0xeau, 0xfdu, 0x2cu, 0x7au, 0x4eu, 0xecu, 0xe0u, 0xb0u, 0x7au, 0x4eu, 0xecu,
                0x09u, 0x2du, 0xbeu, 0x67u, 0x20u, 0x09u, 0x2du, 0xbeu, 0x4bu, 0xb6u, 0xc0u, 0x66u, 0xc2u, 0x4bu, 0xb6u, 0xc0u,
                0xf1u, 0x14u, 0x5fu, 0x99u, 0x17u, 0xf1u, 0x14u, 0x5fu, 0x37u, 0x89u, 0xd9u, 0xacu, 0xe4u, 0x37u, 0x89u, 0xd9u,
                0x5eu, 0x2fu, 0x45u, 0x92u, 0x7du, 0x5eu, 0x2fu, 0x45u, 0x3eu, 0x43u, 0xdfu, 0x24u, 0xd6u, 0x3eu, 0x43u, 0x46u,
            ),
            p
        )

        l = funL(p)

        assertContentEquals(
            ubyteArrayOf(
                0xb9u, 0x1bu, 0x12u, 0x28u, 0x50u, 0xf6u, 0xcdu, 0x90u, 0xf6u, 0x2cu, 0xadu, 0x0du, 0xb2u, 0x5fu, 0x46u, 0xbeu,
                0x35u, 0x1eu, 0xc0u, 0x71u, 0x4bu, 0xfcu, 0x43u, 0xfcu, 0xd4u, 0x2fu, 0x5cu, 0x47u, 0xdfu, 0xa8u, 0x78u, 0xceu,
                0xa0u, 0x12u, 0xe2u, 0xc0u, 0xebu, 0x53u, 0x79u, 0x1eu, 0xc2u, 0xe4u, 0x2au, 0x60u, 0x89u, 0x91u, 0x57u, 0x56u,
                0x3fu, 0x65u, 0x83u, 0x31u, 0x6fu, 0x3fu, 0xc7u, 0x24u, 0x80u, 0x75u, 0xe0u, 0xd8u, 0xd4u, 0x59u, 0x00u, 0xe6u,
            ),
            l
        )

        x = funX(key, C[1]!!)

        assertContentEquals(
            ubyteArrayOf(
                0x73u, 0xe0u, 0x72u, 0x3cu, 0x77u, 0x99u, 0x03u, 0x6eu, 0x57u, 0xe8u, 0xa0u, 0x02u, 0x18u, 0x88u, 0xf5u, 0xb6u,
                0x61u, 0x76u, 0xb4u, 0x6au, 0x26u, 0xd6u, 0xc1u, 0x11u, 0x75u, 0xccu, 0xb3u, 0x5cu, 0xbfu, 0x1cu, 0xffu, 0xf8u,
                0x88u, 0x61u, 0x51u, 0xbbu, 0xa3u, 0x44u, 0xcdu, 0xc2u, 0x62u, 0x75u, 0x91u, 0xe0u, 0x6du, 0x8au, 0xe9u, 0x9cu,
                0x6bu, 0xd9u, 0xb1u, 0x0eu, 0xafu, 0xd3u, 0x48u, 0x58u, 0x9du, 0x7fu, 0x1eu, 0xd0u, 0xf4u, 0xa7u, 0x8bu, 0x02u
            ),
            x
        )

        s = funS(x)

        assertContentEquals(
            ubyteArrayOf(
                0x3du, 0x20u, 0x19u, 0x7fu, 0x7eu, 0xe8u, 0x11u, 0xb2u, 0x12u, 0xcbu, 0xa7u, 0xddu, 0x17u, 0xd7u, 0xf4u, 0x55u,
                0xa1u, 0x8au, 0x27u, 0x78u, 0xefu, 0xf8u, 0x58u, 0x77u, 0x35u, 0x88u, 0x92u, 0x9cu, 0x3bu, 0x14u, 0xb6u, 0xd1u,
                0xd7u, 0xa1u, 0x70u, 0x7du, 0x73u, 0xeau, 0xd9u, 0xb3u, 0x96u, 0x35u, 0x0fu, 0x20u, 0x9eu, 0xd6u, 0x9bu, 0x4eu,
                0x6fu, 0x53u, 0x45u, 0x04u, 0x41u, 0x49u, 0xf2u, 0xbfu, 0x33u, 0x57u, 0x5fu, 0xe1u, 0xe6u, 0x44u, 0xf6u, 0xddu,
            ),
            s
        )
    }

    @Test
    fun testFn2() {

        val inputMessage = ubyteArrayOf(
            0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
            0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
            0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
            0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u
        )

        val m = padding(inputMessage, BLOCK_SIZE)

        assertContentEquals(
            ubyteArrayOf(
                0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
                0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
                0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
                0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x01u
            ),
            m
        )

        val h = funGN(VI512, m, N)

        assertContentEquals(
            ubyteArrayOf(
                0xe2u, 0xdau, 0x3bu, 0x6bu, 0x73u, 0xe4u, 0xfeu, 0x05u, 0xd9u, 0xf5u, 0xb1u, 0x3fu, 0x79u, 0x35u, 0x41u, 0x95u,
                0x5cu, 0x81u, 0x50u, 0x2cu, 0x52u, 0x0fu, 0xedu, 0xd3u, 0xc5u, 0xbau, 0xbbu, 0x8cu, 0x90u, 0xf6u, 0x54u, 0x27u,
                0xbdu, 0x8eu, 0x73u, 0x33u, 0xdbu, 0x8au, 0x48u, 0x26u, 0xa6u, 0xa9u, 0x5au, 0x44u, 0x41u, 0x66u, 0xa8u, 0x17u,
                0x38u, 0x4fu, 0x39u, 0x21u, 0xafu, 0x34u, 0xeau, 0x91u, 0x11u, 0xcbu, 0x2cu, 0x81u, 0xf8u, 0x2cu, 0x10u, 0xfdu,
            ),
            h
        )

        val n = zAdd(N, funModM(inputMessage.size))
        assertContentEquals(
            ubyteArrayOf(
                0xf8u, 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            ),
            n
        )

        val sigma = zAdd(m, Sigma)

        assertContentEquals(
            sigma,
            m
        )

        val g0 = funG0(h, n)

        assertContentEquals(
            ubyteArrayOf(
                0x7cu, 0x1du, 0x77u, 0xe7u, 0x5du, 0x1au, 0x90u, 0xa8u, 0x01u, 0x45u, 0xd3u, 0x62u, 0xd6u, 0xe1u, 0x37u, 0x90u,
                0x7fu, 0x6eu, 0xa6u, 0x19u, 0x4fu, 0xa1u, 0x47u, 0x21u, 0x62u, 0x94u, 0x37u, 0x6du, 0x9du, 0xb6u, 0x2du, 0x3du,
                0x52u, 0x97u, 0xd5u, 0xd4u, 0x67u, 0x70u, 0xbbu, 0xaau, 0xebu, 0x16u, 0x17u, 0x0bu, 0x2au, 0x6fu, 0x02u, 0x42u,
                0xb6u, 0x14u, 0x0du, 0xc2u, 0xfeu, 0xe4u, 0xc2u, 0x96u, 0xf1u, 0x5cu, 0x69u, 0x24u, 0xd9u, 0x1fu, 0x88u, 0x5cu,
            ),
            g0
        )
    }

    @Test
    fun testFn3() {

        val m = ubyteArrayOf(
            0x20u, 0xc8u, 0xe3u, 0xeeu, 0xf0u, 0xe5u, 0xe2u, 0xfbu, 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
        )

        val n = ubyteArrayOf(
            0x00u, 0x02u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
        )

        val h = ubyteArrayOf(
            0xafu, 0xc7u, 0x07u, 0xc4u, 0xdau, 0x6cu, 0x81u, 0x2eu, 0x85u, 0xeau, 0x2cu, 0x8eu, 0x1eu, 0x22u, 0x5du, 0x2eu,
            0x48u, 0x1fu, 0x73u, 0x89u, 0x88u, 0x3bu, 0x84u, 0xa7u, 0x6au, 0xa4u, 0xc7u, 0xf7u, 0x9eu, 0x77u, 0xefu, 0x98u,
            0x7bu, 0x51u, 0x0cu, 0x9bu, 0x45u, 0xacu, 0xb7u, 0x27u, 0xe1u, 0xf8u, 0x10u, 0x8fu, 0x93u, 0x4eu, 0x91u, 0xe2u,
            0x5du, 0x39u, 0x95u, 0x97u, 0xcdu, 0x4cu, 0xbbu, 0xe3u, 0x65u, 0xa4u, 0xfau, 0x12u, 0x23u, 0x60u, 0x7fu, 0xcdu,
        )

        val gn = funGN(h, m, n)

        assertContentEquals(
            ubyteArrayOf(
                0x8eu, 0x87u, 0xdcu, 0xcbu, 0x02u, 0x59u, 0x68u, 0x64u, 0x7bu, 0xa1u, 0xd7u, 0x6eu, 0x5cu, 0x79u, 0x82u, 0xc3u,
                0x3du, 0x49u, 0x61u, 0x6eu, 0xf9u, 0xb8u, 0xffu, 0x2du, 0xf9u, 0x1cu, 0x81u, 0x06u, 0x07u, 0x4du, 0xb8u, 0xe8u,
                0x61u, 0x06u, 0xf7u, 0x1du, 0x5fu, 0x09u, 0x18u, 0x78u, 0xc0u, 0x7fu, 0x57u, 0x28u, 0x5eu, 0xdbu, 0xa1u, 0xacu,
                0xc6u, 0x8du, 0xafu, 0x5fu, 0x2du, 0xc7u, 0x89u, 0xf0u, 0x04u, 0x44u, 0xf1u, 0xfdu, 0x6eu, 0xaeu, 0x44u, 0xc5u,
            ),
            gn
        )
    }

    @Test
    fun testHash_512() {

        val inputMessage = ubyteArrayOf(
            0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
            0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
            0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
            0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u
        )

        val hash = Hash512()
        hash.update(inputMessage)
        val ctx = hash.final()

        assertContentEquals(
            ubyteArrayOf(
                0x1bu, 0x54u, 0xd0u, 0x1au, 0x4au, 0xf5u, 0xb9u, 0xd5u, 0xccu, 0x3du, 0x86u, 0xd6u, 0x8du, 0x28u, 0x54u, 0x62u,
                0xb1u, 0x9au, 0xbcu, 0x24u, 0x75u, 0x22u, 0x2fu, 0x35u, 0xc0u, 0x85u, 0x12u, 0x2bu, 0xe4u, 0xbau, 0x1fu, 0xfau,
                0x00u, 0xadu, 0x30u, 0xf8u, 0x76u, 0x7bu, 0x3au, 0x82u, 0x38u, 0x4cu, 0x65u, 0x74u, 0xf0u, 0x24u, 0xc3u, 0x11u,
                0xe2u, 0xa4u, 0x81u, 0x33u, 0x2bu, 0x08u, 0xefu, 0x7fu, 0x41u, 0x79u, 0x78u, 0x91u, 0xc1u, 0x64u, 0x6fu, 0x48u,
            ),
            ctx.h
        )

        assertContentEquals(
            ubyteArrayOf(
                0xf8u, 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            ),
            ctx.n
        )

        assertContentEquals(
            ubyteArrayOf(
                0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
                0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
                0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
                0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x01u
            ),
            ctx.sigma
        )
    }

    @Test
    fun testHash_512_2() {

        val hash = Hash512()
        hash.update(
            ubyteArrayOf(
                0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u
            )
        )
        val ctx = hash.final(
            ubyteArrayOf(
                0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
                0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
                0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
                0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u
            )
        )

        assertContentEquals(
            ubyteArrayOf(
                0x1bu, 0x54u, 0xd0u, 0x1au, 0x4au, 0xf5u, 0xb9u, 0xd5u, 0xccu, 0x3du, 0x86u, 0xd6u, 0x8du, 0x28u, 0x54u, 0x62u,
                0xb1u, 0x9au, 0xbcu, 0x24u, 0x75u, 0x22u, 0x2fu, 0x35u, 0xc0u, 0x85u, 0x12u, 0x2bu, 0xe4u, 0xbau, 0x1fu, 0xfau,
                0x00u, 0xadu, 0x30u, 0xf8u, 0x76u, 0x7bu, 0x3au, 0x82u, 0x38u, 0x4cu, 0x65u, 0x74u, 0xf0u, 0x24u, 0xc3u, 0x11u,
                0xe2u, 0xa4u, 0x81u, 0x33u, 0x2bu, 0x08u, 0xefu, 0x7fu, 0x41u, 0x79u, 0x78u, 0x91u, 0xc1u, 0x64u, 0x6fu, 0x48u,
            ),
            ctx.h
        )

        assertContentEquals(
            ubyteArrayOf(
                0xf8u, 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            ),
            ctx.n
        )

        assertContentEquals(
            ubyteArrayOf(
                0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
                0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
                0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
                0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x01u
            ),
            ctx.sigma
        )
    }

    @Test
    fun testHash_512_3() {

        val hash = Hash512()
        hash.update(
            ubyteArrayOf(
                0xd1u, 0xe5u, 0x20u, 0xe2u, 0xe5u, 0xf2u, 0xf0u, 0xe8u, 0x2cu, 0x20u, 0xd1u, 0xf2u, 0xf0u, 0xe8u, 0xe1u, 0xeeu,
                0xe6u, 0xe8u, 0x20u, 0xe2u, 0xedu, 0xf3u, 0xf6u, 0xe8u, 0x2cu, 0x20u, 0xe2u, 0xe5u, 0xfeu, 0xf2u, 0xfau, 0x20u,
                0xf1u, 0x20u, 0xecu, 0xeeu, 0xf0u, 0xffu, 0x20u, 0xf1u, 0xf2u, 0xf0u, 0xe5u, 0xebu, 0xe0u, 0xecu, 0xe8u, 0x20u,
                0xedu, 0xe0u, 0x20u, 0xf5u, 0xf0u, 0xe0u, 0xe1u, 0xf0u, 0xfbu, 0xffu, 0x20u, 0xefu, 0xebu, 0xfau, 0xeau, 0xfbu,
            )
        )

        val ctx = hash.final(
            ubyteArrayOf(
                0x20u, 0xc8u, 0xe3u, 0xeeu, 0xf0u, 0xe5u, 0xe2u, 0xfbu,
            )
        )

        assertContentEquals(
            ubyteArrayOf(
                0x40u, 0x02u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            ),
            ctx.n
        )

        assertContentEquals(
            ubyteArrayOf(
                0xf1u, 0xadu, 0x04u, 0xd1u, 0xd6u, 0xd8u, 0xd3u, 0xe4u, 0x2eu, 0x20u, 0xd1u, 0xf2u, 0xf0u, 0xe8u, 0xe1u, 0xeeu,
                0xe6u, 0xe8u, 0x20u, 0xe2u, 0xedu, 0xf3u, 0xf6u, 0xe8u, 0x2cu, 0x20u, 0xe2u, 0xe5u, 0xfeu, 0xf2u, 0xfau, 0x20u,
                0xf1u, 0x20u, 0xecu, 0xeeu, 0xf0u, 0xffu, 0x20u, 0xf1u, 0xf2u, 0xf0u, 0xe5u, 0xebu, 0xe0u, 0xecu, 0xe8u, 0x20u,
                0xedu, 0xe0u, 0x20u, 0xf5u, 0xf0u, 0xe0u, 0xe1u, 0xf0u, 0xfbu, 0xffu, 0x20u, 0xefu, 0xebu, 0xfau, 0xeau, 0xfbu,
            ),
            ctx.sigma
        )

        assertContentEquals(
            ubyteArrayOf(
                0x1eu, 0x88u, 0xe6u, 0x22u, 0x26u, 0xbfu, 0xcau, 0x6fu, 0x99u, 0x94u, 0xf1u, 0xf2u, 0xd5u, 0x15u, 0x69u, 0xe0u,
                0xdau, 0xf8u, 0x47u, 0x5au, 0x3bu, 0x0fu, 0xe6u, 0x1au, 0x53u, 0x00u, 0xeeu, 0xe4u, 0x6du, 0x96u, 0x13u, 0x76u,
                0x03u, 0x5fu, 0xe8u, 0x35u, 0x49u, 0xadu, 0xa2u, 0xb8u, 0x62u, 0x0fu, 0xcdu, 0x7cu, 0x49u, 0x6cu, 0xe5u, 0xb3u,
                0x3fu, 0x0cu, 0xb9u, 0xddu, 0xdcu, 0x2bu, 0x64u, 0x60u, 0x14u, 0x3bu, 0x03u, 0xdau, 0xbau, 0xc9u, 0xfbu, 0x28u,
            ),
            ctx.h
        )
    }

    @Test
    fun testHash_512_4() {

        val hash = Hash512()
        hash.update(
            ubyteArrayOf(
                0xd1u, 0xe5u, 0x20u, 0xe2u, 0xe5u, 0xf2u, 0xf0u, 0xe8u, 0x2cu,
            )
        )

        hash.update(
            ubyteArrayOf(
                0x20u, 0xd1u, 0xf2u, 0xf0u, 0xe8u, 0xe1u, 0xeeu,
                0xe6u, 0xe8u, 0x20u, 0xe2u, 0xedu, 0xf3u, 0xf6u, 0xe8u, 0x2cu, 0x20u, 0xe2u, 0xe5u, 0xfeu, 0xf2u, 0xfau, 0x20u,
                0xf1u, 0x20u, 0xecu, 0xeeu, 0xf0u, 0xffu, 0x20u, 0xf1u, 0xf2u, 0xf0u, 0xe5u, 0xebu, 0xe0u, 0xecu, 0xe8u, 0x20u,
            )
        )

        val ctx = hash.final(
            ubyteArrayOf(
                0xedu, 0xe0u, 0x20u, 0xf5u, 0xf0u, 0xe0u, 0xe1u, 0xf0u, 0xfbu, 0xffu, 0x20u, 0xefu, 0xebu, 0xfau, 0xeau, 0xfbu,
                0x20u, 0xc8u, 0xe3u, 0xeeu, 0xf0u, 0xe5u, 0xe2u, 0xfbu,
            )
        )

        assertContentEquals(
            ubyteArrayOf(
                0x40u, 0x02u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            ),
            ctx.n
        )

        assertContentEquals(
            ubyteArrayOf(
                0xf1u, 0xadu, 0x04u, 0xd1u, 0xd6u, 0xd8u, 0xd3u, 0xe4u, 0x2eu, 0x20u, 0xd1u, 0xf2u, 0xf0u, 0xe8u, 0xe1u, 0xeeu,
                0xe6u, 0xe8u, 0x20u, 0xe2u, 0xedu, 0xf3u, 0xf6u, 0xe8u, 0x2cu, 0x20u, 0xe2u, 0xe5u, 0xfeu, 0xf2u, 0xfau, 0x20u,
                0xf1u, 0x20u, 0xecu, 0xeeu, 0xf0u, 0xffu, 0x20u, 0xf1u, 0xf2u, 0xf0u, 0xe5u, 0xebu, 0xe0u, 0xecu, 0xe8u, 0x20u,
                0xedu, 0xe0u, 0x20u, 0xf5u, 0xf0u, 0xe0u, 0xe1u, 0xf0u, 0xfbu, 0xffu, 0x20u, 0xefu, 0xebu, 0xfau, 0xeau, 0xfbu,
            ),
            ctx.sigma
        )

        assertContentEquals(
            ubyteArrayOf(
                0x1eu, 0x88u, 0xe6u, 0x22u, 0x26u, 0xbfu, 0xcau, 0x6fu, 0x99u, 0x94u, 0xf1u, 0xf2u, 0xd5u, 0x15u, 0x69u, 0xe0u,
                0xdau, 0xf8u, 0x47u, 0x5au, 0x3bu, 0x0fu, 0xe6u, 0x1au, 0x53u, 0x00u, 0xeeu, 0xe4u, 0x6du, 0x96u, 0x13u, 0x76u,
                0x03u, 0x5fu, 0xe8u, 0x35u, 0x49u, 0xadu, 0xa2u, 0xb8u, 0x62u, 0x0fu, 0xcdu, 0x7cu, 0x49u, 0x6cu, 0xe5u, 0xb3u,
                0x3fu, 0x0cu, 0xb9u, 0xddu, 0xdcu, 0x2bu, 0x64u, 0x60u, 0x14u, 0x3bu, 0x03u, 0xdau, 0xbau, 0xc9u, 0xfbu, 0x28u,
            ),
            ctx.h
        )
    }

    @Test
    fun testHash_512_5() {

        val hash = Hash512()
        hash.update(
            ubyteArrayOf(
                0xd1u, 0xe5u, 0x20u, 0xe2u, 0xe5u, 0xf2u, 0xf0u, 0xe8u, 0x2cu,
            )
        )

        hash.update(
            ubyteArrayOf(
                0x20u, 0xd1u, 0xf2u, 0xf0u, 0xe8u, 0xe1u, 0xeeu,
                0xe6u, 0xe8u, 0x20u, 0xe2u, 0xedu, 0xf3u, 0xf6u, 0xe8u, 0x2cu, 0x20u, 0xe2u, 0xe5u, 0xfeu, 0xf2u, 0xfau, 0x20u,
                0xf1u, 0x20u, 0xecu, 0xeeu, 0xf0u, 0xffu, 0x20u, 0xf1u, 0xf2u, 0xf0u, 0xe5u, 0xebu, 0xe0u, 0xecu, 0xe8u, 0x20u,
                0xedu, 0xe0u, 0x20u, 0xf5u, 0xf0u, 0xe0u, 0xe1u, 0xf0u, 0xfbu, 0xffu, 0x20u, 0xefu, 0xebu, 0xfau, 0xeau, 0xfbu,
                0x20u, 0xc8u, 0xe3u, 0xeeu, 0xf0u, 0xe5u, 0xe2u, 0xfbu,
            )
        )

        val ctx = hash.final()

        assertContentEquals(
            ubyteArrayOf(
                0x40u, 0x02u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            ),
            ctx.n
        )

        assertContentEquals(
            ubyteArrayOf(
                0xf1u, 0xadu, 0x04u, 0xd1u, 0xd6u, 0xd8u, 0xd3u, 0xe4u, 0x2eu, 0x20u, 0xd1u, 0xf2u, 0xf0u, 0xe8u, 0xe1u, 0xeeu,
                0xe6u, 0xe8u, 0x20u, 0xe2u, 0xedu, 0xf3u, 0xf6u, 0xe8u, 0x2cu, 0x20u, 0xe2u, 0xe5u, 0xfeu, 0xf2u, 0xfau, 0x20u,
                0xf1u, 0x20u, 0xecu, 0xeeu, 0xf0u, 0xffu, 0x20u, 0xf1u, 0xf2u, 0xf0u, 0xe5u, 0xebu, 0xe0u, 0xecu, 0xe8u, 0x20u,
                0xedu, 0xe0u, 0x20u, 0xf5u, 0xf0u, 0xe0u, 0xe1u, 0xf0u, 0xfbu, 0xffu, 0x20u, 0xefu, 0xebu, 0xfau, 0xeau, 0xfbu,
            ),
            ctx.sigma
        )

        assertContentEquals(
            ubyteArrayOf(
                0x1eu, 0x88u, 0xe6u, 0x22u, 0x26u, 0xbfu, 0xcau, 0x6fu, 0x99u, 0x94u, 0xf1u, 0xf2u, 0xd5u, 0x15u, 0x69u, 0xe0u,
                0xdau, 0xf8u, 0x47u, 0x5au, 0x3bu, 0x0fu, 0xe6u, 0x1au, 0x53u, 0x00u, 0xeeu, 0xe4u, 0x6du, 0x96u, 0x13u, 0x76u,
                0x03u, 0x5fu, 0xe8u, 0x35u, 0x49u, 0xadu, 0xa2u, 0xb8u, 0x62u, 0x0fu, 0xcdu, 0x7cu, 0x49u, 0x6cu, 0xe5u, 0xb3u,
                0x3fu, 0x0cu, 0xb9u, 0xddu, 0xdcu, 0x2bu, 0x64u, 0x60u, 0x14u, 0x3bu, 0x03u, 0xdau, 0xbau, 0xc9u, 0xfbu, 0x28u,
            ),
            ctx.h
        )
    }

    @Test
    fun testHash_256() {

        val inputMessage = ubyteArrayOf(
            0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
            0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
            0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
            0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u
        )

        val hash = Hash256()

        hash.update(inputMessage)

        val ctx = hash.final()

        assertContentEquals(
            ubyteArrayOf(
                0x9du, 0x15u, 0x1eu, 0xefu, 0xd8u, 0x59u, 0x0bu, 0x89u, 0xdau, 0xa6u, 0xbau, 0x6cu, 0xb7u, 0x4au, 0xf9u, 0x27u,
                0x5du, 0xd0u, 0x51u, 0x02u, 0x6bu, 0xb1u, 0x49u, 0xa4u, 0x52u, 0xfdu, 0x84u, 0xe5u, 0xe5u, 0x7bu, 0x55u, 0x00u,
            ),
            ctx.h
        )

        assertContentEquals(
            ubyteArrayOf(
                0xf8u, 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            ),
            ctx.n
        )

        assertContentEquals(
            ubyteArrayOf(
                0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u,
                0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u,
                0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u,
                0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x30u, 0x31u, 0x32u, 0x01u,
            ),
            ctx.sigma
        )
    }

    @Test
    fun testHash_256_2() {

        val hash = Hash256()
        hash.update(
            ubyteArrayOf(
                0xd1u, 0xe5u, 0x20u, 0xe2u, 0xe5u, 0xf2u, 0xf0u, 0xe8u, 0x2cu,
            )
        )

        hash.update(
            ubyteArrayOf(
                0x20u, 0xd1u, 0xf2u, 0xf0u, 0xe8u, 0xe1u, 0xeeu,
                0xe6u, 0xe8u, 0x20u, 0xe2u, 0xedu, 0xf3u, 0xf6u, 0xe8u, 0x2cu, 0x20u, 0xe2u, 0xe5u, 0xfeu, 0xf2u, 0xfau, 0x20u,
            )
        )

        val ctx = hash.final(
            ubyteArrayOf(
                0xf1u, 0x20u, 0xecu, 0xeeu, 0xf0u, 0xffu, 0x20u, 0xf1u, 0xf2u, 0xf0u, 0xe5u, 0xebu, 0xe0u, 0xecu, 0xe8u, 0x20u,
                0xedu, 0xe0u, 0x20u, 0xf5u, 0xf0u, 0xe0u, 0xe1u, 0xf0u, 0xfbu, 0xffu, 0x20u, 0xefu, 0xebu, 0xfau, 0xeau, 0xfbu,
                0x20u, 0xc8u, 0xe3u, 0xeeu, 0xf0u, 0xe5u, 0xe2u, 0xfbu,
            )
        )

        assertContentEquals(
            ubyteArrayOf(
                0x40u, 0x02u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
            ),
            ctx.n
        )

        assertContentEquals(
            ubyteArrayOf(
                0xf1u, 0xadu, 0x04u, 0xd1u, 0xd6u, 0xd8u, 0xd3u, 0xe4u, 0x2eu, 0x20u, 0xd1u, 0xf2u, 0xf0u, 0xe8u, 0xe1u, 0xeeu,
                0xe6u, 0xe8u, 0x20u, 0xe2u, 0xedu, 0xf3u, 0xf6u, 0xe8u, 0x2cu, 0x20u, 0xe2u, 0xe5u, 0xfeu, 0xf2u, 0xfau, 0x20u,
                0xf1u, 0x20u, 0xecu, 0xeeu, 0xf0u, 0xffu, 0x20u, 0xf1u, 0xf2u, 0xf0u, 0xe5u, 0xebu, 0xe0u, 0xecu, 0xe8u, 0x20u,
                0xedu, 0xe0u, 0x20u, 0xf5u, 0xf0u, 0xe0u, 0xe1u, 0xf0u, 0xfbu, 0xffu, 0x20u, 0xefu, 0xebu, 0xfau, 0xeau, 0xfbu,
            ),
            ctx.sigma
        )

        assertContentEquals(
            ubyteArrayOf(
                0x9du, 0xd2u, 0xfeu, 0x4eu, 0x90u, 0x40u, 0x9eu, 0x5du, 0xa8u, 0x7fu, 0x53u, 0x97u, 0x6du, 0x74u, 0x05u, 0xb0u,
                0xc0u, 0xcau, 0xc6u, 0x28u, 0xfcu, 0x66u, 0x9au, 0x74u, 0x1du, 0x50u, 0x06u, 0x3cu, 0x55u, 0x7eu, 0x8fu, 0x50u,
            ),
            ctx.h
        )
    }

    private fun padding(input: UByteArray, blockSize: Int): UByteArray {

        if (input.size == blockSize)
            return input
        val output = UByteArray(blockSize)
        input.copyInto(output)
        output[input.size] = 0x01u

        return output
    }
}
