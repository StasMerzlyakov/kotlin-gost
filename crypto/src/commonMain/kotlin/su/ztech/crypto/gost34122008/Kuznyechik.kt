/*
 * Created by Stanislav Merzlyakov
 * st.merzlyakov@yandex.ru
 *  in May-2022.
 */

package su.ztech.crypto.gost34122008

import su.ztech.crypto.Encryptor
import su.ztech.crypto.get

const val KUZNYECHIK_BLOCK_SIZE = 16

private val PI = ubyteArrayOf(
    0xfcu, 0xeeu, 0xddu, 0x11u, 0xcfu, 0x6eu, 0x31u, 0x16u,
    0xfbu, 0xc4u, 0xfau, 0xdau, 0x23u, 0xc5u, 0x04u, 0x4du,
    0xe9u, 0x77u, 0xf0u, 0xdbu, 0x93u, 0x2eu, 0x99u, 0xbau,
    0x17u, 0x36u, 0xf1u, 0xbbu, 0x14u, 0xcdu, 0x5fu, 0xc1u,
    0xf9u, 0x18u, 0x65u, 0x5au, 0xe2u, 0x5cu, 0xefu, 0x21u,
    0x81u, 0x1cu, 0x3cu, 0x42u, 0x8bu, 0x01u, 0x8eu, 0x4fu,
    0x05u, 0x84u, 0x02u, 0xaeu, 0xe3u, 0x6au, 0x8fu, 0xa0u,
    0x06u, 0x0bu, 0xedu, 0x98u, 0x7fu, 0xd4u, 0xd3u, 0x1fu,
    0xebu, 0x34u, 0x2cu, 0x51u, 0xeau, 0xc8u, 0x48u, 0xabu,
    0xf2u, 0x2au, 0x68u, 0xa2u, 0xfdu, 0x3au, 0xceu, 0xccu,
    0xb5u, 0x70u, 0x0eu, 0x56u, 0x08u, 0x0cu, 0x76u, 0x12u,
    0xbfu, 0x72u, 0x13u, 0x47u, 0x9cu, 0xb7u, 0x5du, 0x87u,
    0x15u, 0xa1u, 0x96u, 0x29u, 0x10u, 0x7bu, 0x9au, 0xc7u,
    0xf3u, 0x91u, 0x78u, 0x6fu, 0x9du, 0x9eu, 0xb2u, 0xb1u,
    0x32u, 0x75u, 0x19u, 0x3du, 0xffu, 0x35u, 0x8au, 0x7eu,
    0x6du, 0x54u, 0xc6u, 0x80u, 0xc3u, 0xbdu, 0x0du, 0x57u,
    0xdfu, 0xf5u, 0x24u, 0xa9u, 0x3eu, 0xa8u, 0x43u, 0xc9u,
    0xd7u, 0x79u, 0xd6u, 0xf6u, 0x7cu, 0x22u, 0xb9u, 0x03u,
    0xe0u, 0x0fu, 0xecu, 0xdeu, 0x7au, 0x94u, 0xb0u, 0xbcu,
    0xdcu, 0xe8u, 0x28u, 0x50u, 0x4eu, 0x33u, 0x0au, 0x4au,
    0xa7u, 0x97u, 0x60u, 0x73u, 0x1eu, 0x00u, 0x62u, 0x44u,
    0x1au, 0xb8u, 0x38u, 0x82u, 0x64u, 0x9fu, 0x26u, 0x41u,
    0xadu, 0x45u, 0x46u, 0x92u, 0x27u, 0x5eu, 0x55u, 0x2fu,
    0x8cu, 0xa3u, 0xa5u, 0x7du, 0x69u, 0xd5u, 0x95u, 0x3bu,
    0x07u, 0x58u, 0xb3u, 0x40u, 0x86u, 0xacu, 0x1du, 0xf7u,
    0x30u, 0x37u, 0x6bu, 0xe4u, 0x88u, 0xd9u, 0xe7u, 0x89u,
    0xe1u, 0x1bu, 0x83u, 0x49u, 0x4cu, 0x3fu, 0xf8u, 0xfeu,
    0x8du, 0x53u, 0xaau, 0x90u, 0xcau, 0xd8u, 0x85u, 0x61u,
    0x20u, 0x71u, 0x67u, 0xa4u, 0x2du, 0x2bu, 0x09u, 0x5bu,
    0xcbu, 0x9bu, 0x25u, 0xd0u, 0xbeu, 0xe5u, 0x6cu, 0x52u,
    0x59u, 0xa6u, 0x74u, 0xd2u, 0xe6u, 0xf4u, 0xb4u, 0xc0u,
    0xd1u, 0x66u, 0xafu, 0xc2u, 0x39u, 0x4bu, 0x63u, 0xb6u,
)

private val PI_reverse = ubyteArrayOf(
    0xa5u, 0x2du, 0x32u, 0x8fu, 0x0eu, 0x30u, 0x38u, 0xc0u,
    0x54u, 0xe6u, 0x9eu, 0x39u, 0x55u, 0x7eu, 0x52u, 0x91u,
    0x64u, 0x03u, 0x57u, 0x5au, 0x1cu, 0x60u, 0x07u, 0x18u,
    0x21u, 0x72u, 0xa8u, 0xd1u, 0x29u, 0xc6u, 0xa4u, 0x3fu,
    0xe0u, 0x27u, 0x8du, 0x0cu, 0x82u, 0xeau, 0xaeu, 0xb4u,
    0x9au, 0x63u, 0x49u, 0xe5u, 0x42u, 0xe4u, 0x15u, 0xb7u,
    0xc8u, 0x06u, 0x70u, 0x9du, 0x41u, 0x75u, 0x19u, 0xc9u,
    0xaau, 0xfcu, 0x4du, 0xbfu, 0x2au, 0x73u, 0x84u, 0xd5u,
    0xc3u, 0xafu, 0x2bu, 0x86u, 0xa7u, 0xb1u, 0xb2u, 0x5bu,
    0x46u, 0xd3u, 0x9fu, 0xfdu, 0xd4u, 0x0fu, 0x9cu, 0x2fu,
    0x9bu, 0x43u, 0xefu, 0xd9u, 0x79u, 0xb6u, 0x53u, 0x7fu,
    0xc1u, 0xf0u, 0x23u, 0xe7u, 0x25u, 0x5eu, 0xb5u, 0x1eu,
    0xa2u, 0xdfu, 0xa6u, 0xfeu, 0xacu, 0x22u, 0xf9u, 0xe2u,
    0x4au, 0xbcu, 0x35u, 0xcau, 0xeeu, 0x78u, 0x05u, 0x6bu,
    0x51u, 0xe1u, 0x59u, 0xa3u, 0xf2u, 0x71u, 0x56u, 0x11u,
    0x6au, 0x89u, 0x94u, 0x65u, 0x8cu, 0xbbu, 0x77u, 0x3cu,
    0x7bu, 0x28u, 0xabu, 0xd2u, 0x31u, 0xdeu, 0xc4u, 0x5fu,
    0xccu, 0xcfu, 0x76u, 0x2cu, 0xb8u, 0xd8u, 0x2eu, 0x36u,
    0xdbu, 0x69u, 0xb3u, 0x14u, 0x95u, 0xbeu, 0x62u, 0xa1u,
    0x3bu, 0x16u, 0x66u, 0xe9u, 0x5cu, 0x6cu, 0x6du, 0xadu,
    0x37u, 0x61u, 0x4bu, 0xb9u, 0xe3u, 0xbau, 0xf1u, 0xa0u,
    0x85u, 0x83u, 0xdau, 0x47u, 0xc5u, 0xb0u, 0x33u, 0xfau,
    0x96u, 0x6fu, 0x6eu, 0xc2u, 0xf6u, 0x50u, 0xffu, 0x5du,
    0xa9u, 0x8eu, 0x17u, 0x1bu, 0x97u, 0x7du, 0xecu, 0x58u,
    0xf7u, 0x1fu, 0xfbu, 0x7cu, 0x09u, 0x0du, 0x7au, 0x67u,
    0x45u, 0x87u, 0xdcu, 0xe8u, 0x4fu, 0x1du, 0x4eu, 0x04u,
    0xebu, 0xf8u, 0xf3u, 0x3eu, 0x3du, 0xbdu, 0x8au, 0x88u,
    0xddu, 0xcdu, 0x0bu, 0x13u, 0x98u, 0x02u, 0x93u, 0x80u,
    0x90u, 0xd0u, 0x24u, 0x34u, 0xcbu, 0xedu, 0xf4u, 0xceu,
    0x99u, 0x10u, 0x44u, 0x40u, 0x92u, 0x3au, 0x01u, 0x26u,
    0x12u, 0x1au, 0x48u, 0x68u, 0xf5u, 0x81u, 0x8bu, 0xc7u,
    0xd6u, 0x20u, 0x0au, 0x08u, 0x00u, 0x4cu, 0xd7u, 0x74u
)

private val L = ubyteArrayOf(148u, 32u, 133u, 16u, 194u, 192u, 1u, 251u, 1u, 192u, 194u, 16u, 133u, 32u, 148u, 1u)

fun gostS(state: UByteArray) {
    val result = UByteArray(KUZNYECHIK_BLOCK_SIZE)
    state.forEachIndexed { index, value ->
        result[index] = PI[value]
    }
    result.copyInto(state)
}

fun gostSReverse(state: UByteArray) {
    val result = UByteArray(KUZNYECHIK_BLOCK_SIZE)
    state.forEachIndexed { index, value ->
        result[index] = PI_reverse[value]
    }
    result.copyInto(state)
}

fun gostX(a: UByteArray, b: UByteArray, c: UByteArray) {
    a.forEachIndexed { index, _ ->
        c[index] = a[index] xor b[index]
    }
}

/**
 * Galois field over polynomial x^8 + x^7 + x^6 + x + 1 multiplication
 */
fun gostGFMul(a: UByte, b: UByte): UByte {
    var c = 0u
    var va = a.toUInt()
    var vb = b.toUInt()

    for (i in 0 until 8) {
        if (vb and 1u > 0u) {
            c = c xor va
        }

        val hi = va and 0x80u
        va = va shl 1
        if (hi > 0u) {
            va = va xor 0xc3u //  x^8 + x^7 + x^6 + x + 1
        }
        vb = vb shr 1
    }
    return c.toUByte()
}

fun gostR(state: UByteArray) {

    val result = UByteArray(KUZNYECHIK_BLOCK_SIZE)

    // Копируем значения от 1 до 15 со сдвигом
    state.copyInto(result, 1, 0, KUZNYECHIK_BLOCK_SIZE - 1)

    var a0: UByte = 0u

    for (i in 0 until KUZNYECHIK_BLOCK_SIZE) {
        a0 = a0 xor gostGFMul(state[i], L[i])
    }
    result[0] = a0
    result.copyInto(state)
}

fun gostRReverse(state: UByteArray) {

    val result = UByteArray(KUZNYECHIK_BLOCK_SIZE)

    state.copyInto(result, 0, 1, KUZNYECHIK_BLOCK_SIZE)

    result[KUZNYECHIK_BLOCK_SIZE - 1] = state[0]

    var a0: UByte = 0u

    for (i in 0 until KUZNYECHIK_BLOCK_SIZE) {
        a0 = a0 xor gostGFMul(result[i], L[i])
    }
    result[KUZNYECHIK_BLOCK_SIZE - 1] = a0
    result.copyInto(state)
}

fun gostL(state: UByteArray) {
    for (i in 0 until KUZNYECHIK_BLOCK_SIZE) {
        gostR(state)
    }
}

fun gostLReverse(state: UByteArray) {
    for (i in 0 until KUZNYECHIK_BLOCK_SIZE) {
        gostRReverse(state)
    }
}

private val C1 = ubyteArrayOf(0x6eu, 0xa2u, 0x76u, 0x72u, 0x6cu, 0x48u, 0x7au, 0xb8u, 0x5du, 0x27u, 0xbdu, 0x10u, 0xddu, 0x84u, 0x94u, 0x01u)
private val C2 = ubyteArrayOf(0xdcu, 0x87u, 0xecu, 0xe4u, 0xd8u, 0x90u, 0xf4u, 0xb3u, 0xbau, 0x4eu, 0xb9u, 0x20u, 0x79u, 0xcbu, 0xebu, 0x02u)
private val C3 = ubyteArrayOf(0xb2u, 0x25u, 0x9au, 0x96u, 0xb4u, 0xd8u, 0x8eu, 0x0bu, 0xe7u, 0x69u, 0x04u, 0x30u, 0xa4u, 0x4fu, 0x7fu, 0x03u)
private val C4 = ubyteArrayOf(0x7bu, 0xcdu, 0x1bu, 0x0bu, 0x73u, 0xe3u, 0x2bu, 0xa5u, 0xb7u, 0x9cu, 0xb1u, 0x40u, 0xf2u, 0x55u, 0x15u, 0x04u)
private val C5 = ubyteArrayOf(0x15u, 0x6fu, 0x6du, 0x79u, 0x1fu, 0xabu, 0x51u, 0x1du, 0xeau, 0xbbu, 0x0cu, 0x50u, 0x2fu, 0xd1u, 0x81u, 0x05u)
private val C6 = ubyteArrayOf(0xa7u, 0x4au, 0xf7u, 0xefu, 0xabu, 0x73u, 0xdfu, 0x16u, 0x0du, 0xd2u, 0x08u, 0x60u, 0x8bu, 0x9eu, 0xfeu, 0x06u)
private val C7 = ubyteArrayOf(0xc9u, 0xe8u, 0x81u, 0x9du, 0xc7u, 0x3bu, 0xa5u, 0xaeu, 0x50u, 0xf5u, 0xb5u, 0x70u, 0x56u, 0x1au, 0x6au, 0x07u)
private val C8 = ubyteArrayOf(0xf6u, 0x59u, 0x36u, 0x16u, 0xe6u, 0x05u, 0x56u, 0x89u, 0xadu, 0xfbu, 0xa1u, 0x80u, 0x27u, 0xaau, 0x2au, 0x08u)
private val C9 = ubyteArrayOf(0x98u, 0xfbu, 0x40u, 0x64u, 0x8au, 0x4du, 0x2cu, 0x31u, 0xf0u, 0xdcu, 0x1cu, 0x90u, 0xfau, 0x2eu, 0xbeu, 0x09u)
private val C10 = ubyteArrayOf(0x2au, 0xdeu, 0xdau, 0xf2u, 0x3eu, 0x95u, 0xa2u, 0x3au, 0x17u, 0xb5u, 0x18u, 0xa0u, 0x5eu, 0x61u, 0xc1u, 0x0au)
private val C11 = ubyteArrayOf(0x44u, 0x7cu, 0xacu, 0x80u, 0x52u, 0xddu, 0xd8u, 0x82u, 0x4au, 0x92u, 0xa5u, 0xb0u, 0x83u, 0xe5u, 0x55u, 0x0bu)
private val C12 = ubyteArrayOf(0x8du, 0x94u, 0x2du, 0x1du, 0x95u, 0xe6u, 0x7du, 0x2cu, 0x1au, 0x67u, 0x10u, 0xc0u, 0xd5u, 0xffu, 0x3fu, 0x0cu)
private val C13 = ubyteArrayOf(0xe3u, 0x36u, 0x5bu, 0x6fu, 0xf9u, 0xaeu, 0x07u, 0x94u, 0x47u, 0x40u, 0xadu, 0xd0u, 0x08u, 0x7bu, 0xabu, 0x0du)
private val C14 = ubyteArrayOf(0x51u, 0x13u, 0xc1u, 0xf9u, 0x4du, 0x76u, 0x89u, 0x9fu, 0xa0u, 0x29u, 0xa9u, 0xe0u, 0xacu, 0x34u, 0xd4u, 0x0eu)
private val C15 = ubyteArrayOf(0x3fu, 0xb1u, 0xb7u, 0x8bu, 0x21u, 0x3eu, 0xf3u, 0x27u, 0xfdu, 0x0eu, 0x14u, 0xf0u, 0x71u, 0xb0u, 0x40u, 0x0fu)
private val C16 = ubyteArrayOf(0x2fu, 0xb2u, 0x6cu, 0x2cu, 0x0fu, 0x0au, 0xacu, 0xd1u, 0x99u, 0x35u, 0x81u, 0xc3u, 0x4eu, 0x97u, 0x54u, 0x10u)
private val C17 = ubyteArrayOf(0x41u, 0x10u, 0x1au, 0x5eu, 0x63u, 0x42u, 0xd6u, 0x69u, 0xc4u, 0x12u, 0x3cu, 0xd3u, 0x93u, 0x13u, 0xc0u, 0x11u)
private val C18 = ubyteArrayOf(0xf3u, 0x35u, 0x80u, 0xc8u, 0xd7u, 0x9au, 0x58u, 0x62u, 0x23u, 0x7bu, 0x38u, 0xe3u, 0x37u, 0x5cu, 0xbfu, 0x12u)
private val C19 = ubyteArrayOf(0x9du, 0x97u, 0xf6u, 0xbau, 0xbbu, 0xd2u, 0x22u, 0xdau, 0x7eu, 0x5cu, 0x85u, 0xf3u, 0xeau, 0xd8u, 0x2bu, 0x13u)
private val C20 = ubyteArrayOf(0x54u, 0x7fu, 0x77u, 0x27u, 0x7cu, 0xe9u, 0x87u, 0x74u, 0x2eu, 0xa9u, 0x30u, 0x83u, 0xbcu, 0xc2u, 0x41u, 0x14u)
private val C21 = ubyteArrayOf(0x3au, 0xddu, 0x01u, 0x55u, 0x10u, 0xa1u, 0xfdu, 0xccu, 0x73u, 0x8eu, 0x8du, 0x93u, 0x61u, 0x46u, 0xd5u, 0x15u)
private val C22 = ubyteArrayOf(0x88u, 0xf8u, 0x9bu, 0xc3u, 0xa4u, 0x79u, 0x73u, 0xc7u, 0x94u, 0xe7u, 0x89u, 0xa3u, 0xc5u, 0x09u, 0xaau, 0x16u)
private val C23 = ubyteArrayOf(0xe6u, 0x5au, 0xedu, 0xb1u, 0xc8u, 0x31u, 0x09u, 0x7fu, 0xc9u, 0xc0u, 0x34u, 0xb3u, 0x18u, 0x8du, 0x3eu, 0x17u)
private val C24 = ubyteArrayOf(0xd9u, 0xebu, 0x5au, 0x3au, 0xe9u, 0x0fu, 0xfau, 0x58u, 0x34u, 0xceu, 0x20u, 0x43u, 0x69u, 0x3du, 0x7eu, 0x18u)
private val C25 = ubyteArrayOf(0xb7u, 0x49u, 0x2cu, 0x48u, 0x85u, 0x47u, 0x80u, 0xe0u, 0x69u, 0xe9u, 0x9du, 0x53u, 0xb4u, 0xb9u, 0xeau, 0x19u)
private val C26 = ubyteArrayOf(0x05u, 0x6cu, 0xb6u, 0xdeu, 0x31u, 0x9fu, 0x0eu, 0xebu, 0x8eu, 0x80u, 0x99u, 0x63u, 0x10u, 0xf6u, 0x95u, 0x1au)
private val C27 = ubyteArrayOf(0x6bu, 0xceu, 0xc0u, 0xacu, 0x5du, 0xd7u, 0x74u, 0x53u, 0xd3u, 0xa7u, 0x24u, 0x73u, 0xcdu, 0x72u, 0x01u, 0x1bu)
private val C28 = ubyteArrayOf(0xa2u, 0x26u, 0x41u, 0x31u, 0x9au, 0xecu, 0xd1u, 0xfdu, 0x83u, 0x52u, 0x91u, 0x03u, 0x9bu, 0x68u, 0x6bu, 0x1cu)
private val C29 = ubyteArrayOf(0xccu, 0x84u, 0x37u, 0x43u, 0xf6u, 0xa4u, 0xabu, 0x45u, 0xdeu, 0x75u, 0x2cu, 0x13u, 0x46u, 0xecu, 0xffu, 0x1du)
private val C30 = ubyteArrayOf(0x7eu, 0xa1u, 0xadu, 0xd5u, 0x42u, 0x7cu, 0x25u, 0x4eu, 0x39u, 0x1cu, 0x28u, 0x23u, 0xe2u, 0xa3u, 0x80u, 0x1eu)
private val C31 = ubyteArrayOf(0x10u, 0x03u, 0xdbu, 0xa7u, 0x2eu, 0x34u, 0x5fu, 0xf6u, 0x64u, 0x3bu, 0x95u, 0x33u, 0x3fu, 0x27u, 0x14u, 0x1fu)
private val C32 = ubyteArrayOf(0x5eu, 0xa7u, 0xd8u, 0x58u, 0x1eu, 0x14u, 0x9bu, 0x61u, 0xf1u, 0x6au, 0xc1u, 0x45u, 0x9cu, 0xedu, 0xa8u, 0x20u)

val C = mapOf(
    1 to C1, 2 to C2, 3 to C3, 4 to C4, 5 to C5, 6 to C6, 7 to C7, 8 to C8,
    9 to C9, 10 to C10, 11 to C11, 12 to C12, 13 to C13, 14 to C14, 15 to C15, 16 to C16,
    17 to C17, 18 to C18, 19 to C19, 20 to C20, 21 to C21, 22 to C22, 23 to C23, 24 to C24,
    25 to C25, 26 to C26, 27 to C27, 28 to C28, 29 to C29, 30 to C30, 31 to C31, 32 to C32
)

/**
 * F-функция
 */
fun gostF(iter: UByteArray, keyPair: Pair<UByteArray, UByteArray>): Pair<UByteArray, UByteArray> {
    val state = UByteArray(KUZNYECHIK_BLOCK_SIZE)
    gostX(iter, keyPair.first, state)
    gostS(state)
    gostL(state)
    gostX(state, keyPair.second, state)
    return Pair(state, keyPair.first)
}

/**
 * Развертывание ключе
 */
fun gostKeyExpand(iter: Int, keyPair: Pair<UByteArray, UByteArray>): Pair<UByteArray, UByteArray> {
    var result: Pair<UByteArray, UByteArray>
    when (iter) {
        1, 2, 3, 4 -> {
            result = gostF(C[8 * (iter - 1) + 1]!!, keyPair)
            result = gostF(C[8 * (iter - 1) + 2]!!, result)
            result = gostF(C[8 * (iter - 1) + 3]!!, result)
            result = gostF(C[8 * (iter - 1) + 4]!!, result)
            result = gostF(C[8 * (iter - 1) + 5]!!, result)
            result = gostF(C[8 * (iter - 1) + 6]!!, result)
            result = gostF(C[8 * (iter - 1) + 7]!!, result)
            result = gostF(C[8 * (iter - 1) + 8]!!, result)
        }
        else -> throw AssertionError("Ожидается 1..4")
    }
    return result
}

/**
 * Блок шифрования
 */
fun gostE(message: UByteArray, key: UByteArray) {
    gostX(message, key, message)
    gostS(message)
    gostL(message)
}

/**
 * Блок дешифрования
 */
fun gostD(message: UByteArray, key: UByteArray) {
    gostX(message, key, message)
    gostLReverse(message)
    gostSReverse(message)
}

/**
 * Алгоритм блочного шифрования "Кузнечик"
 */
class Kuznyechik(keyPair: Pair<UByteArray, UByteArray>) : Encryptor {

    private val expandedKeysMap = mutableMapOf<Int, Pair<UByteArray, UByteArray>>()

    init {
        expandedKeysMap[0] = keyPair
        for (i in 1..4) {
            expandedKeysMap[i] = gostKeyExpand(i, expandedKeysMap[i - 1]!!)
        }
    }

    /**
     * Функция шифрования блока длины 128 бит на ключе длины 128*2 бит
     */
    override fun encrypt(message: UByteArray): UByteArray {
        val result = message.copyOf()
        var keyPair = expandedKeysMap[0]!!

        for (i in 1..4) {
            gostE(result, keyPair.first)
            gostE(result, keyPair.second)
            keyPair = expandedKeysMap[i]!!
        }
        gostE(result, keyPair.first)
        gostX(result, keyPair.second, result)
        return result
    }

    /**
     * Функция дешифрования блока длины 128 бит на ключе длины 128*2 бит
     */
    fun decrypt(message: UByteArray): UByteArray {
        val result = message.copyOf()
        var keyPair = expandedKeysMap[4]!!

        for (i in 3 downTo 0) {
            gostD(result, keyPair.second)
            gostD(result, keyPair.first)
            keyPair = expandedKeysMap[i]!!
        }
        gostD(result, keyPair.second)
        gostX(result, keyPair.first, result)
        return result
    }
}
