/*
 * Created by Stanislav Merzlyakov
 * st.merzlyakov@yandex.ru
 *  in May-2022.
 */

package su.ztech.crypto.gost34112012

import su.ztech.crypto.get

const val BLOCK_SIZE = 64

private val PI = ubyteArrayOf(
    0xfcu, 0xeeu, 0xddu, 0x11u, 0xcfu, 0x6eu, 0x31u, 0x16u,
    0xfbu, 0xc4u, 0xfau, 0xdau, 0x23u, 0xc5u, 0x04u, 0x4du,
    0xe9u, 0x77u, 0xf0u, 0xdbu, 0x93u, 0x2eu, 0x99u, 0xbau,
    0x17u, 0x36u, 0xf1u, 0xbbu, 0x14u, 0xcdu, 0x5fu, 0xc1u,
    0xf9u, 0x18u, 0x65u, 0x5au, 0xe2u, 0x5cu, 0xefu, 0x21u,
    0x81u, 0x1cu, 0x3cu, 0x42u, 0x8bu, 0x01u, 0x8eu, 0x4fu,
    0x05u, 0x84u, 0x02u, 0xaeu, 0xe3u, 0x6au, 0x8fu, 0xa0u,
    0x06u, 0x0bu, 0xedu, 0x98u, 0x7fu, 0xd4u, 0xd3u, 0x1fu,
    0xebu, 0x34u, 0x2cu, 0x51u, 0xeau, 0xc8u, 0x48u, 0xabu,
    0xf2u, 0x2au, 0x68u, 0xa2u, 0xfdu, 0x3au, 0xceu, 0xccu,
    0xb5u, 0x70u, 0x0eu, 0x56u, 0x08u, 0x0cu, 0x76u, 0x12u,
    0xbfu, 0x72u, 0x13u, 0x47u, 0x9cu, 0xb7u, 0x5du, 0x87u,
    0x15u, 0xa1u, 0x96u, 0x29u, 0x10u, 0x7bu, 0x9au, 0xc7u,
    0xf3u, 0x91u, 0x78u, 0x6fu, 0x9du, 0x9eu, 0xb2u, 0xb1u,
    0x32u, 0x75u, 0x19u, 0x3du, 0xffu, 0x35u, 0x8au, 0x7eu,
    0x6du, 0x54u, 0xc6u, 0x80u, 0xc3u, 0xbdu, 0x0du, 0x57u,
    0xdfu, 0xf5u, 0x24u, 0xa9u, 0x3eu, 0xa8u, 0x43u, 0xc9u,
    0xd7u, 0x79u, 0xd6u, 0xf6u, 0x7cu, 0x22u, 0xb9u, 0x03u,
    0xe0u, 0x0fu, 0xecu, 0xdeu, 0x7au, 0x94u, 0xb0u, 0xbcu,
    0xdcu, 0xe8u, 0x28u, 0x50u, 0x4eu, 0x33u, 0x0au, 0x4au,
    0xa7u, 0x97u, 0x60u, 0x73u, 0x1eu, 0x00u, 0x62u, 0x44u,
    0x1au, 0xb8u, 0x38u, 0x82u, 0x64u, 0x9fu, 0x26u, 0x41u,
    0xadu, 0x45u, 0x46u, 0x92u, 0x27u, 0x5eu, 0x55u, 0x2fu,
    0x8cu, 0xa3u, 0xa5u, 0x7du, 0x69u, 0xd5u, 0x95u, 0x3bu,
    0x07u, 0x58u, 0xb3u, 0x40u, 0x86u, 0xacu, 0x1du, 0xf7u,
    0x30u, 0x37u, 0x6bu, 0xe4u, 0x88u, 0xd9u, 0xe7u, 0x89u,
    0xe1u, 0x1bu, 0x83u, 0x49u, 0x4cu, 0x3fu, 0xf8u, 0xfeu,
    0x8du, 0x53u, 0xaau, 0x90u, 0xcau, 0xd8u, 0x85u, 0x61u,
    0x20u, 0x71u, 0x67u, 0xa4u, 0x2du, 0x2bu, 0x09u, 0x5bu,
    0xcbu, 0x9bu, 0x25u, 0xd0u, 0xbeu, 0xe5u, 0x6cu, 0x52u,
    0x59u, 0xa6u, 0x74u, 0xd2u, 0xe6u, 0xf4u, 0xb4u, 0xc0u,
    0xd1u, 0x66u, 0xafu, 0xc2u, 0x39u, 0x4bu, 0x63u, 0xb6u,
)

private val TAU = ubyteArrayOf(
    0x00u, 0x08u, 0x10u, 0x18u, 0x20u, 0x28u, 0x30u, 0x38u,
    0x01u, 0x09u, 0x11u, 0x19u, 0x21u, 0x29u, 0x31u, 0x39u,
    0x02u, 0x0au, 0x12u, 0x1au, 0x22u, 0x2au, 0x32u, 0x3au,
    0x03u, 0x0bu, 0x13u, 0x1bu, 0x23u, 0x2bu, 0x33u, 0x3bu,
    0x04u, 0x0cu, 0x14u, 0x1cu, 0x24u, 0x2cu, 0x34u, 0x3cu,
    0x05u, 0x0du, 0x15u, 0x1du, 0x25u, 0x2du, 0x35u, 0x3du,
    0x06u, 0x0eu, 0x16u, 0x1eu, 0x26u, 0x2eu, 0x36u, 0x3eu,
    0x07u, 0x0fu, 0x17u, 0x1fu, 0x27u, 0x2fu, 0x37u, 0x3fu,
)

private val GF2Matrix = ulongArrayOf(
    0x8e20faa72ba0b470u, 0x47107ddd9b505a38u, 0xad08b0e0c3282d1cu, 0xd8045870ef14980eu,
    0x6c022c38f90a4c07u, 0x3601161cf205268du, 0x1b8e0b0e798c13c8u, 0x83478b07b2468764u,
    0xa011d380818e8f40u, 0x5086e740ce47c920u, 0x2843fd2067adea10u, 0x14aff010bdd87508u,
    0x0ad97808d06cb404u, 0x05e23c0468365a02u, 0x8c711e02341b2d01u, 0x46b60f011a83988eu,
    0x90dab52a387ae76fu, 0x486dd4151c3dfdb9u, 0x24b86a840e90f0d2u, 0x125C354207487869u,
    0x092e94218d243cbau, 0x8a174a9ec8121e5du, 0x4585254f64090fa0u, 0xaccc9ca9328a8950u,
    0x9d4df05d5f661451u, 0xc0a878a0a1330aa6u, 0x60543c50de970553u, 0x302a1e286fc58ca7u,
    0x18150f14b9ec46ddu, 0x0c84890ad27623e0u, 0x0642ca05693b9f70u, 0x0321658cba93c138u,
    0x86275df09ce8aaa8u, 0x439da0784e745554u, 0xafc0503c273aa42au, 0xd960281e9d1d5215u,
    0xe230140fc0802984u, 0x71180a8960409a42u, 0xb60c05ca30204d21u, 0x5b068c651810a89eu,
    0x456c34887a3805b9u, 0xac361a443d1c8cd2u, 0x561b0d22900e4669u, 0x2b838811480723bau,
    0x9bcf4486248d9f5du, 0xc3e9224312c8c1a0u, 0xeffa11af0964ee50u, 0xf97d86d98a327728u,
    0xe4fa2054a80b329cu, 0x727d102a548b194eu, 0x39b008152acb8227u, 0x9258048415eb419du,
    0x492c024284fbaec0u, 0xaa16012142f35760u, 0x550b8e9e21f7a530u, 0xa48b474f9ef5dc18u,
    0x70a6a56e2440598eu, 0x3853dc371220a247u, 0x1ca76e95091051adu, 0x0edd37c48a08a6d8u,
    0x07e095624504536cu, 0x8d70c431ac02a736u, 0xc83862965601dd1bu, 0x641c314b2b8ee083u,
)

val VI512: UByteArray
    get() = UByteArray(BLOCK_SIZE)

val VI256: UByteArray
    get() = UByteArray(BLOCK_SIZE) { 0x01u }

val v_512: UByteArray
    get() = UByteArray(BLOCK_SIZE).apply {
        this[1] = 0x02u
    }

val N: UByteArray
    get() = UByteArray(BLOCK_SIZE)

val Sigma: UByteArray
    get() = UByteArray(BLOCK_SIZE)

private val C1 = ubyteArrayOf(
    0x07u, 0x45u, 0xa6u, 0xf2u, 0x59u, 0x65u, 0x80u, 0xddu, 0x23u, 0x4du, 0x74u, 0xccu, 0x36u, 0x74u, 0x76u, 0x05u,
    0x15u, 0xd3u, 0x60u, 0xa4u, 0x08u, 0x2au, 0x42u, 0xa2u, 0x01u, 0x69u, 0x67u, 0x92u, 0x91u, 0xe0u, 0x7cu, 0x4bu,
    0xfcu, 0xc4u, 0x85u, 0x75u, 0x8du, 0xb8u, 0x4eu, 0x71u, 0x16u, 0xd0u, 0x45u, 0x2eu, 0x43u, 0x76u, 0x6au, 0x2fu,
    0x1fu, 0x7cu, 0x65u, 0xc0u, 0x81u, 0x2fu, 0xcbu, 0xebu, 0xe9u, 0xdau, 0xcau, 0x1eu, 0xdau, 0x5bu, 0x08u, 0xb1u,
)

private val C2 = ubyteArrayOf(
    0xb7u, 0x9bu, 0xb1u, 0x21u, 0x70u, 0x04u, 0x79u, 0xe6u, 0x56u, 0xcdu, 0xcbu, 0xd7u, 0x1bu, 0xa2u, 0xddu, 0x55u,
    0xcau, 0xa7u, 0x0au, 0xdbu, 0xc2u, 0x61u, 0xb5u, 0x5cu, 0x58u, 0x99u, 0xd6u, 0x12u, 0x6bu, 0x17u, 0xb5u, 0x9au,
    0x31u, 0x01u, 0xb5u, 0x16u, 0x0fu, 0x5eu, 0xd5u, 0x61u, 0x98u, 0x2bu, 0x23u, 0x0au, 0x72u, 0xeau, 0xfeu, 0xf3u,
    0xd7u, 0xb5u, 0x70u, 0x0fu, 0x46u, 0x9du, 0xe3u, 0x4fu, 0x1au, 0x2fu, 0x9du, 0xa9u, 0x8au, 0xb5u, 0xa3u, 0x6fu,
)

private val C3 = ubyteArrayOf(
    0xb2u, 0x0au, 0xbau, 0x0au, 0xf5u, 0x96u, 0x1eu, 0x99u, 0x31u, 0xdbu, 0x7au, 0x86u, 0x43u, 0xf4u, 0xb6u, 0xc2u,
    0x09u, 0xdbu, 0x62u, 0x60u, 0x37u, 0x3au, 0xc9u, 0xc1u, 0xb1u, 0x9eu, 0x35u, 0x90u, 0xe4u, 0x0fu, 0xe2u, 0xd3u,
    0x7bu, 0x7bu, 0x29u, 0xb1u, 0x14u, 0x75u, 0xeau, 0xf2u, 0x8bu, 0x1fu, 0x9cu, 0x52u, 0x5fu, 0x5eu, 0xf1u, 0x06u,
    0x35u, 0x84u, 0x3du, 0x6au, 0x28u, 0xfcu, 0x39u, 0x0au, 0xc7u, 0x2fu, 0xceu, 0x2bu, 0xacu, 0xdcu, 0x74u, 0xf5u,
)

private val C4 = ubyteArrayOf(
    0x2eu, 0xd1u, 0xe3u, 0x84u, 0xbcu, 0xbeu, 0x0cu, 0x22u, 0xf1u, 0x37u, 0xe8u, 0x93u, 0xa1u, 0xeau, 0x53u, 0x34u,
    0xbeu, 0x03u, 0x52u, 0x93u, 0x33u, 0x13u, 0xb7u, 0xd8u, 0x75u, 0xd6u, 0x03u, 0xedu, 0x82u, 0x2cu, 0xd7u, 0xa9u,
    0x3fu, 0x35u, 0x5eu, 0x68u, 0xadu, 0x1cu, 0x72u, 0x9du, 0x7du, 0x3cu, 0x5cu, 0x33u, 0x7eu, 0x85u, 0x8eu, 0x48u,
    0xddu, 0xe4u, 0x71u, 0x5du, 0xa0u, 0xe1u, 0x48u, 0xf9u, 0xd2u, 0x66u, 0x15u, 0xe8u, 0xb3u, 0xdfu, 0x1fu, 0xefu,
)

private val C5 = ubyteArrayOf(
    0x57u, 0xfeu, 0x6cu, 0x7cu, 0xfdu, 0x58u, 0x17u, 0x60u, 0xf5u, 0x63u, 0xeau, 0xa9u, 0x7eu, 0xa2u, 0x56u, 0x7au,
    0x16u, 0x1au, 0x27u, 0x23u, 0xb7u, 0x00u, 0xffu, 0xdfu, 0xa3u, 0xf5u, 0x3au, 0x25u, 0x47u, 0x17u, 0xcdu, 0xbfu,
    0xbdu, 0xffu, 0x0fu, 0x80u, 0xd7u, 0x35u, 0x9eu, 0x35u, 0x4au, 0x10u, 0x86u, 0x16u, 0x1fu, 0x1cu, 0x15u, 0x7fu,
    0x63u, 0x23u, 0xa9u, 0x6cu, 0x0cu, 0x41u, 0x3fu, 0x9au, 0x99u, 0x47u, 0x47u, 0xadu, 0xacu, 0x6bu, 0xeau, 0x4bu,
)

private val C6 = ubyteArrayOf(
    0x6eu, 0x7du, 0x64u, 0x46u, 0x7au, 0x40u, 0x68u, 0xfau, 0x35u, 0x4fu, 0x90u, 0x36u, 0x72u, 0xc5u, 0x71u, 0xbfu,
    0xb6u, 0xc6u, 0xbeu, 0xc2u, 0x66u, 0x1fu, 0xf2u, 0x0au, 0xb4u, 0xb7u, 0x9au, 0x1cu, 0xb7u, 0xa6u, 0xfau, 0xcfu,
    0xc6u, 0x8eu, 0xf0u, 0x9au, 0xb4u, 0x9au, 0x7fu, 0x18u, 0x6cu, 0xa4u, 0x42u, 0x51u, 0xf9u, 0xc4u, 0x66u, 0x2du,
    0xc0u, 0x39u, 0x30u, 0x7au, 0x3bu, 0xc3u, 0xa4u, 0x6fu, 0xd9u, 0xd3u, 0x3au, 0x1du, 0xaeu, 0xaeu, 0x4fu, 0xaeu,
)

private val C7 = ubyteArrayOf(
    0x93u, 0xd4u, 0x14u, 0x3au, 0x4du, 0x56u, 0x86u, 0x88u, 0xf3u, 0x4au, 0x3cu, 0xa2u, 0x4cu, 0x45u, 0x17u, 0x35u,
    0x04u, 0x05u, 0x4au, 0x28u, 0x83u, 0x69u, 0x47u, 0x06u, 0x37u, 0x2cu, 0x82u, 0x2du, 0xc5u, 0xabu, 0x92u, 0x09u,
    0xc9u, 0x93u, 0x7au, 0x19u, 0x33u, 0x3eu, 0x47u, 0xd3u, 0xc9u, 0x87u, 0xbfu, 0xe6u, 0xc7u, 0xc6u, 0x9eu, 0x39u,
    0x54u, 0x09u, 0x24u, 0xbfu, 0xfeu, 0x86u, 0xacu, 0x51u, 0xecu, 0xc5u, 0xaau, 0xeeu, 0x16u, 0x0eu, 0xc7u, 0xf4u,
)

private val C8 = ubyteArrayOf(
    0x1eu, 0xe7u, 0x02u, 0xbfu, 0xd4u, 0x0du, 0x7fu, 0xa4u, 0xd9u, 0xa8u, 0x51u, 0x59u, 0x35u, 0xc2u, 0xacu, 0x36u,
    0x2fu, 0xc4u, 0xa5u, 0xd1u, 0x2bu, 0x8du, 0xd1u, 0x69u, 0x90u, 0x06u, 0x9bu, 0x92u, 0xcbu, 0x2bu, 0x89u, 0xf4u,
    0x9au, 0xc4u, 0xdbu, 0x4du, 0x3bu, 0x44u, 0xb4u, 0x89u, 0x1eu, 0xdeu, 0x36u, 0x9cu, 0x71u, 0xf8u, 0xb7u, 0x4eu,
    0x41u, 0x41u, 0x6eu, 0x0cu, 0x02u, 0xaau, 0xe7u, 0x03u, 0xa7u, 0xc9u, 0x93u, 0x4du, 0x42u, 0x5bu, 0x1fu, 0x9bu,
)

private val C9 = ubyteArrayOf(
    0xdbu, 0x5au, 0x23u, 0x83u, 0x51u, 0x44u, 0x61u, 0x72u, 0x60u, 0x2au, 0x1fu, 0xcbu, 0x92u, 0xdcu, 0x38u, 0x0eu,
    0x54u, 0x9cu, 0x07u, 0xa6u, 0x9au, 0x8au, 0x2bu, 0x7bu, 0xb1u, 0xceu, 0xb2u, 0xdbu, 0x0bu, 0x44u, 0x0au, 0x80u,
    0x84u, 0x09u, 0x0du, 0xe0u, 0xb7u, 0x55u, 0xd9u, 0x3cu, 0x24u, 0x42u, 0x89u, 0x25u, 0x1bu, 0x3au, 0x7du, 0x3au,
    0xdeu, 0x5fu, 0x16u, 0xecu, 0xd8u, 0x9au, 0x4cu, 0x94u, 0x9bu, 0x22u, 0x31u, 0x16u, 0x54u, 0x5au, 0x8fu, 0x37u,
)

private val C10 = ubyteArrayOf(
    0xedu, 0x9cu, 0x45u, 0x98u, 0xfbu, 0xc7u, 0xb4u, 0x74u, 0xc3u, 0xb6u, 0x3bu, 0x15u, 0xd1u, 0xfau, 0x98u, 0x36u,
    0xf4u, 0x52u, 0x76u, 0x3bu, 0x30u, 0x6cu, 0x1eu, 0x7au, 0x4bu, 0x33u, 0x69u, 0xafu, 0x02u, 0x67u, 0xe7u, 0x9fu,
    0x03u, 0x61u, 0x33u, 0x1bu, 0x8au, 0xe1u, 0xffu, 0x1fu, 0xdbu, 0x78u, 0x8au, 0xffu, 0x1cu, 0xe7u, 0x41u, 0x89u,
    0xf3u, 0xf3u, 0xe4u, 0xb2u, 0x48u, 0xe5u, 0x2au, 0x38u, 0x52u, 0x6fu, 0x05u, 0x80u, 0xa6u, 0xdeu, 0xbeu, 0xabu,
)

private val C11 = ubyteArrayOf(
    0x1bu, 0x2du, 0xf3u, 0x81u, 0xcdu, 0xa4u, 0xcau, 0x6bu, 0x5du, 0xd8u, 0x6fu, 0xc0u, 0x4au, 0x59u, 0xa2u, 0xdeu,
    0x98u, 0x6eu, 0x47u, 0x7du, 0x1du, 0xcdu, 0xbau, 0xefu, 0xcau, 0xb9u, 0x48u, 0xeau, 0xefu, 0x71u, 0x1du, 0x8au,
    0x79u, 0x66u, 0x84u, 0x14u, 0x21u, 0x80u, 0x01u, 0x20u, 0x61u, 0x07u, 0xabu, 0xebu, 0xbbu, 0x6bu, 0xfau, 0xd8u,
    0x94u, 0xfeu, 0x5au, 0x63u, 0xcdu, 0xc6u, 0x02u, 0x30u, 0xfbu, 0x89u, 0xc8u, 0xefu, 0xd0u, 0x9eu, 0xcdu, 0x7bu,
)

private val C12 = ubyteArrayOf(
    0x20u, 0xd7u, 0x1bu, 0xf1u, 0x4au, 0x92u, 0xbcu, 0x48u, 0x99u, 0x1bu, 0xb2u, 0xd9u, 0xd5u, 0x17u, 0xf4u, 0xfau,
    0x52u, 0x28u, 0xe1u, 0x88u, 0xaau, 0xa4u, 0x1du, 0xe7u, 0x86u, 0xccu, 0x91u, 0x18u, 0x9du, 0xefu, 0x80u, 0x5du,
    0x9bu, 0x9fu, 0x21u, 0x30u, 0xd4u, 0x12u, 0x20u, 0xf8u, 0x77u, 0x1du, 0xdfu, 0xbcu, 0x32u, 0x3cu, 0xa4u, 0xcdu,
    0x7au, 0xb1u, 0x49u, 0x04u, 0xb0u, 0x80u, 0x13u, 0xd2u, 0xbau, 0x31u, 0x16u, 0xf1u, 0x67u, 0xe7u, 0x8eu, 0x37u,
)

val C = mapOf(
    1 to C1, 2 to C2, 3 to C3, 4 to C4, 5 to C5, 6 to C6,
    7 to C7, 8 to C8, 9 to C9, 10 to C10, 11 to C11, 12 to C12
)

fun funS(state: UByteArray): UByteArray {
    val result = UByteArray(state.size)
    state.forEachIndexed { index, value ->
        result[index] = PI[value]
    }
    return result
}

fun funX(a: UByteArray, b: UByteArray): UByteArray {
    val c = UByteArray(a.size)
    c.forEachIndexed { index, _ ->
        c[index] = a[index] xor b[index]
    }
    return c
}

fun funP(state: UByteArray): UByteArray {
    val result = UByteArray(BLOCK_SIZE)
    result.forEachIndexed { index, _ -> result[index] = state[TAU[index]] }
    return result
}

fun funL(st: UByteArray): UByteArray {
    val state = st.copyOf()
    val result = UByteArray(BLOCK_SIZE)
    for (i in 7 downTo 0) {
        var res: ULong = 0u
        for (j in 7 downTo 0) {
            val value = state[i * 8 + j]
            val aPos = (7 - j) * 8
            if (value and 0x01u > 0u) {
                res = res xor GF2Matrix[aPos + 7]
            }
            if (value and 0x02u > 0u) {
                res = res xor GF2Matrix[aPos + 6]
            }
            if (value and 0x04u > 0u) {
                res = res xor GF2Matrix[aPos + 5]
            }
            if (value and 0x08u > 0u) {
                res = res xor GF2Matrix[aPos + 4]
            }
            if (value and 0x10u > 0u) {
                res = res xor GF2Matrix[aPos + 3]
            }
            if (value and 0x20u > 0u) {
                res = res xor GF2Matrix[aPos + 2]
            }
            if (value and 0x40u > 0u) {
                res = res xor GF2Matrix[aPos + 1]
            }
            if (value and 0x80u > 0u) {
                res = res xor GF2Matrix[aPos]
            }
        }
        result[8 * i + 7] = (((res and 0xFF00000000000000u) shr 56).toUByte())
        result[8 * i + 6] = (((res and 0x00FF000000000000u) shr 48).toUByte())
        result[8 * i + 5] = (((res and 0x0000FF0000000000u) shr 40).toUByte())
        result[8 * i + 4] = (((res and 0x000000FF00000000u) shr 32).toUByte())
        result[8 * i + 3] = (((res and 0x00000000FF000000u) shr 24).toUByte())
        result[8 * i + 2] = (((res and 0x0000000000FF0000u) shr 16).toUByte())
        result[8 * i + 1] = (((res and 0x000000000000FF00u) shr 8).toUByte())
        result[8 * i] = ((res and 0x00000000000000FFu).toUByte())
    }
    return result
}

fun funT(n: UByteArray, k: UByteArray): UByteArray = funL(funP(funS(funX(n, k))))

fun zAdd(a: UByteArray, b: UByteArray): UByteArray {
    var internal: UInt = 0u
    val c = UByteArray(a.size)
    for (index in a.indices) {
        internal = a[index] + b[index] + (internal shr 8)
        c[index] = (internal and 0xffu).toUByte()
    }
    return c
}

fun getKey(key: UByteArray, i: Int, init: UByteArray = VI512): UByteArray {
    val c = when (i) {
        0 -> init
        else -> C[i]!!
    }
    return funT(key, c)
}

data class GostCtx(var h: UByteArray, var n: UByteArray, var sigma: UByteArray)

open class Hash(vi: UByteArray) {
    private val algCtx = GostCtx(vi, N, Sigma)
    private var tailEnd = 0
    private var tail: UByteArray = UByteArray(BLOCK_SIZE)

    open fun update(input: UByteArray) {
        val toUpdate = UByteArray(tailEnd + input.size)

        tail.copyInto(toUpdate, 0, 0, tailEnd)
        input.copyInto(toUpdate, tailEnd)

        val iterationCount = toUpdate.size / BLOCK_SIZE

        for (i in 0 until iterationCount) {
            val m = UByteArray(BLOCK_SIZE)
            val startIndex = i * BLOCK_SIZE
            val endIndex = startIndex + BLOCK_SIZE
            toUpdate.copyInto(m, 0, startIndex, endIndex)
            with(algCtx) {
                h = funGN(h, m, n)
                n = zAdd(n, v_512)
                sigma = zAdd(sigma, m)
            }
        }

        tailEnd = toUpdate.size % BLOCK_SIZE
        if (tailEnd > 0) {
            val startIndex = iterationCount * BLOCK_SIZE
            val endIndex = startIndex + tailEnd
            toUpdate.copyInto(tail, 0, startIndex, endIndex)
        }
    }

    open fun final(input: UByteArray = UByteArray(0)): GostCtx {
        if (input.isNotEmpty())
            update(input)
        tail[tailEnd] = 0x01u

        tail.fill(0u, tailEnd + 1)

        with(algCtx) {
            h = funGN(h, tail, n)
            n = zAdd(n, funModM(tailEnd))
            sigma = zAdd(sigma, tail)

            h = funG0(h, n)
            h = funG0(h, sigma)
        }
        return algCtx
    }
}

class Hash256 : Hash(VI256) {
    override fun final(input: UByteArray): GostCtx {
        val ctx = super.final(input)
        ctx.h = ctx.h.copyOfRange(BLOCK_SIZE / 2, BLOCK_SIZE)
        return ctx
    }
}
class Hash512 : Hash(VI512)

fun funGN(h: UByteArray, m: UByteArray, n: UByteArray): UByteArray {
    var t = m
    var key = UByteArray(BLOCK_SIZE)
    for (i in 0..11) {
        key = getKey(key, i, funX(h, n))
        t = funT(t, key)
    }
    key = getKey(key, 12)
    t = funX(key, t)
    return funX(funX(t, h), m)
}

fun funG0(v1: UByteArray, v2: UByteArray) = funGN(v1, v2, UByteArray(BLOCK_SIZE))

fun funModM(sizeInBytes: Int): UByteArray = modM(sizeInBytes, BLOCK_SIZE)

private fun modM(sizeInBytes: Int, blockSize: Int): UByteArray {
    val result = UByteArray(blockSize)
    var size = (sizeInBytes * 8).toUInt()
    var pos = 0
    while (size > 0u) {
        result[pos] = (size and 0xffu).toUByte()
        size = size shr 8
        pos++
    }
    return result
}
